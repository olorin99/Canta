#version 460

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout (local_size_x = 32) in;

struct Particle {
    vec2 position;
    vec2 velocity;
    vec3 colour;
    int radius;
};

layout (scalar, buffer_reference, buffer_reference_align = 8) readonly buffer ParticleBuffer {
    Particle particles[];
};

layout (push_constant) uniform Push {
    ParticleBuffer particleBuffer;
    int maxParticles;
    float dt;
};

bool outOfBounds(vec2 position) {
    if (position.x > 1920 || position.x < 0 || position.y > 1080 || position.y < 0)
        return true;

    return false;
}

void main() {
    const uint idx = gl_GlobalInvocationID.x;
    if (idx >= maxParticles)
    return;
    Particle particle = particleBuffer.particles[idx];

    vec2 newPosition = particle.position + particle.velocity * dt / 10;
    if (outOfBounds(newPosition)) {
        const vec2 screenCenter = vec2(1920 / 2, 1080 / 2);

        vec2 direction = normalize(screenCenter - newPosition);
        vec2 newVelocity = direction * length(particle.velocity);
        particle.velocity = newVelocity;
    }

    particle.position = newPosition;
    particleBuffer.particles[idx] = particle;
}