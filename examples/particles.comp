#version 460

#include <Canta/canta.glsl>

layout (local_size_x = 32) in;

struct Particle {
    vec2 position;
    vec2 velocity;
    vec3 colour;
    int radius;
};

declareBufferReference(ParticleBuffer,
    Particle particles[];
);

layout (push_constant) uniform Push {
    ParticleBuffer particleBuffer;
    int maxParticles;
    float dt;
};

bool outOfBounds(vec2 position) {
    if (position.x > 1920 || position.x < 0 || position.y > 1080 || position.y < 0)
        return true;

    return false;
}

void main() {
    const uint idx = gl_GlobalInvocationID.x;
    if (idx >= maxParticles)
    return;
    Particle particle = particleBuffer.particles[idx];

    vec2 newPosition = particle.position + particle.velocity * dt / 10;
    if (outOfBounds(newPosition)) {
        const vec2 screenCenter = vec2(1920 / 2, 1080 / 2);

        vec2 direction = normalize(screenCenter - newPosition);
        vec2 newVelocity = direction * length(particle.velocity);
        particle.velocity = newVelocity;
    }

    particle.position = newPosition;
    particleBuffer.particles[idx] = particle;
}